# Manual Testing Makefile for Pomodoro Genie
# This file orchestrates the execution of manual test scenarios

.PHONY: help test-all test-scenarios test-performance validate-setup clean-reports run-backend setup-test-env

# Default target
help:
	@echo "üçÖ Pomodoro Genie Manual Testing Suite"
	@echo "======================================"
	@echo ""
	@echo "Available targets:"
	@echo "  test-all          - Run complete manual test suite"
	@echo "  test-scenarios    - Run individual test scenarios"
	@echo "  test-performance  - Run performance validation only"
	@echo "  validate-setup    - Validate test environment setup"
	@echo "  setup-test-env    - Setup test environment and dependencies"
	@echo "  run-backend       - Start backend server for testing"
	@echo "  clean-reports     - Clean up generated test reports"
	@echo "  generate-report   - Generate HTML test report"
	@echo ""
	@echo "Environment variables:"
	@echo "  BACKEND_URL       - Backend API URL (default: http://localhost:3000/v1)"
	@echo "  TEST_EMAIL        - Test user email (default: test@example.com)"
	@echo "  TEST_PASSWORD     - Test user password (default: TestPassword123!)"
	@echo "  REPORT_DIR        - Report output directory (default: ./reports)"
	@echo ""

# Configuration
BACKEND_URL ?= http://localhost:3000/v1
TEST_EMAIL ?= test@example.com
TEST_PASSWORD ?= TestPassword123!
REPORT_DIR ?= ./reports
TIMESTAMP := $(shell date +%Y%m%d_%H%M%S)

# Create reports directory
$(REPORT_DIR):
	@mkdir -p $(REPORT_DIR)

# Validate test environment setup
validate-setup:
	@echo "üîç Validating test environment setup..."
	@echo "Backend URL: $(BACKEND_URL)"
	@echo "Test User: $(TEST_EMAIL)"
	@echo ""
	@echo "Checking dependencies..."
	@command -v curl >/dev/null 2>&1 || { echo "‚ùå curl is required but not installed"; exit 1; }
	@command -v jq >/dev/null 2>&1 || { echo "‚ùå jq is required but not installed"; exit 1; }
	@command -v go >/dev/null 2>&1 || { echo "‚ùå Go is required but not installed"; exit 1; }
	@echo "‚úÖ All dependencies are available"
	@echo ""
	@echo "Checking backend connectivity..."
	@curl -s -f $(BACKEND_URL)/health >/dev/null || { echo "‚ùå Backend not accessible at $(BACKEND_URL)"; exit 1; }
	@echo "‚úÖ Backend is accessible"
	@echo ""
	@echo "üéâ Test environment is ready!"

# Setup test environment
setup-test-env: validate-setup
	@echo "üîß Setting up test environment..."
	@echo "Creating test data..."
	# Add any additional setup commands here
	@echo "‚úÖ Test environment setup complete"

# Run all manual tests
test-all: validate-setup $(REPORT_DIR)
	@echo "üöÄ Running complete manual test suite..."
	@echo "Started at: $(shell date)"
	@echo ""

	@echo "Executing test scenarios..."
	@BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
		./validate_scenarios.sh 2>&1 | tee $(REPORT_DIR)/test_execution_$(TIMESTAMP).log

	@echo ""
	@echo "üìä Test execution completed at: $(shell date)"
	@echo "üìÑ Logs saved to: $(REPORT_DIR)/test_execution_$(TIMESTAMP).log"

# Run individual test scenarios
test-scenario-1: validate-setup
	@echo "üçÖ Running Scenario 1: Complete Pomodoro Workflow"
	@BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
		bash -c 'source ./validate_scenarios.sh && test_scenario_1'

test-scenario-2: validate-setup
	@echo "üìã Running Scenario 2: Task Management & Reminders"
	@BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
		bash -c 'source ./validate_scenarios.sh && test_scenario_2'

test-scenario-3: validate-setup
	@echo "üîÑ Running Scenario 3: Cross-Device Sync"
	@BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
		bash -c 'source ./validate_scenarios.sh && test_scenario_3'

test-scenario-4: validate-setup
	@echo "üìä Running Scenario 4: Reports & Analytics"
	@BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
		bash -c 'source ./validate_scenarios.sh && test_scenario_4'

test-scenario-5: validate-setup
	@echo "üîÅ Running Scenario 5: Recurring Tasks"
	@BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
		bash -c 'source ./validate_scenarios.sh && test_scenario_5'

# Run performance tests only
test-performance: validate-setup
	@echo "‚ö° Running performance validation..."
	@BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
		bash -c 'source ./validate_scenarios.sh && validate_performance'

# Run scenarios individually
test-scenarios: test-scenario-1 test-scenario-2 test-scenario-3 test-scenario-4 test-scenario-5

# Start backend server for testing
run-backend:
	@echo "üöÄ Starting backend server..."
	@cd ../../.. && \
		if [ ! -f go.mod ]; then \
			echo "Initializing Go module..."; \
			go mod init github.com/pomodoro-team/pomodoro-app; \
		fi && \
		echo "Installing dependencies..." && \
		go mod tidy && \
		echo "Starting server..." && \
		go run cmd/server/main.go || \
		echo "‚ùå Failed to start backend server. Please check the implementation."

# Generate test reports
generate-report: $(REPORT_DIR)
	@echo "üìÑ Generating test reports..."
	@if [ -f "$(REPORT_DIR)/test_execution_$(TIMESTAMP).log" ]; then \
		echo "Converting log to HTML report..."; \
		go run test_report_generator.go -input $(REPORT_DIR)/test_execution_$(TIMESTAMP).log \
			-output $(REPORT_DIR)/test_report_$(TIMESTAMP).html; \
		echo "‚úÖ HTML report generated: $(REPORT_DIR)/test_report_$(TIMESTAMP).html"; \
	else \
		echo "‚ö†Ô∏è  No test execution log found. Run 'make test-all' first."; \
	fi

# Load testing with multiple concurrent users
load-test: validate-setup
	@echo "üî• Running load tests..."
	@echo "Simulating 10 concurrent users..."
	@for i in $$(seq 1 10); do \
		( \
			echo "Starting user $$i..."; \
			BACKEND_URL=$(BACKEND_URL) TEST_EMAIL="test$$i@example.com" TEST_PASSWORD=$(TEST_PASSWORD) \
				./validate_scenarios.sh >/dev/null 2>&1 && \
			echo "User $$i completed successfully" || \
			echo "User $$i failed" \
		) & \
	done; \
	wait; \
	echo "‚úÖ Load testing completed"

# Stress testing with extended duration
stress-test: validate-setup
	@echo "üí™ Running stress tests..."
	@echo "Running continuous tests for 5 minutes..."
	@timeout 300 bash -c 'while true; do \
		BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
			./validate_scenarios.sh >/dev/null 2>&1 || true; \
		sleep 10; \
	done' || echo "‚úÖ Stress testing completed"

# Memory leak testing
memory-test: validate-setup
	@echo "üß† Running memory leak tests..."
	@echo "Monitoring memory usage during test execution..."
	@(while true; do \
		ps aux | grep -E "(server|backend)" | grep -v grep | \
		awk '{print strftime("%Y-%m-%d %H:%M:%S"), "PID:", $$2, "Memory:", $$4"%"}'; \
		sleep 5; \
	done) & \
	MONITOR_PID=$$!; \
	BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
		./validate_scenarios.sh; \
	kill $$MONITOR_PID 2>/dev/null || true; \
	echo "‚úÖ Memory monitoring completed"

# Security testing
security-test: validate-setup
	@echo "üîí Running security tests..."
	@echo "Testing for common vulnerabilities..."
	@echo "1. Testing SQL injection..."
	@curl -s -X POST $(BACKEND_URL)/auth/login \
		-H "Content-Type: application/json" \
		-d '{"email":"test@example.com'\''OR 1=1--","password":"anything"}' >/dev/null && \
		echo "‚ö†Ô∏è  Potential SQL injection vulnerability" || \
		echo "‚úÖ SQL injection test passed"

	@echo "2. Testing XSS prevention..."
	@curl -s -X POST $(BACKEND_URL)/tasks \
		-H "Authorization: Bearer fake-token" \
		-H "Content-Type: application/json" \
		-d '{"title":"<script>alert(\"xss\")</script>"}' >/dev/null 2>&1 || \
		echo "‚úÖ XSS prevention test passed"

	@echo "3. Testing rate limiting..."
	@for i in $$(seq 1 100); do \
		curl -s $(BACKEND_URL)/health >/dev/null 2>&1; \
	done && \
	echo "‚ö†Ô∏è  Rate limiting may not be enforced" || \
	echo "‚úÖ Rate limiting test passed"

# Cross-platform testing
cross-platform-test:
	@echo "üåê Running cross-platform tests..."
	@echo "Testing different user agents..."
	@curl -s -H "User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)" \
		$(BACKEND_URL)/health >/dev/null && echo "‚úÖ iOS compatibility test passed"
	@curl -s -H "User-Agent: Mozilla/5.0 (Linux; Android 10)" \
		$(BACKEND_URL)/health >/dev/null && echo "‚úÖ Android compatibility test passed"
	@curl -s -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)" \
		$(BACKEND_URL)/health >/dev/null && echo "‚úÖ Windows compatibility test passed"

# Cleanup generated reports and logs
clean-reports:
	@echo "üßπ Cleaning up test reports..."
	@rm -rf $(REPORT_DIR)
	@echo "‚úÖ Reports directory cleaned"

# Full test suite with all validations
full-test-suite: clean-reports setup-test-env test-all test-performance generate-report
	@echo ""
	@echo "üéâ Full test suite completed!"
	@echo "üìä Check the reports in: $(REPORT_DIR)/"

# Quick smoke test
smoke-test: validate-setup
	@echo "üí® Running quick smoke test..."
	@curl -s $(BACKEND_URL)/health >/dev/null && echo "‚úÖ Backend health check passed"
	@BACKEND_URL=$(BACKEND_URL) TEST_EMAIL=$(TEST_EMAIL) TEST_PASSWORD=$(TEST_PASSWORD) \
		bash -c 'source ./validate_scenarios.sh && check_backend_health && authenticate_user' && \
		echo "‚úÖ Authentication smoke test passed"
	@echo "üéâ Smoke test completed successfully"

# CI/CD integration target
ci-test: validate-setup test-all
	@echo "ü§ñ CI/CD integration test completed"
	@if [ -f "$(REPORT_DIR)/test_execution_$(TIMESTAMP).log" ]; then \
		grep -q "ALL TESTS PASSED" $(REPORT_DIR)/test_execution_$(TIMESTAMP).log && \
		echo "‚úÖ All tests passed - Ready for deployment" || \
		(echo "‚ùå Some tests failed - Deployment blocked" && exit 1); \
	else \
		echo "‚ùå Test execution log not found" && exit 1; \
	fi

# Watch mode for development
watch-test:
	@echo "üëÄ Watching for changes and running tests..."
	@while inotifywait -e modify ../../ -r 2>/dev/null; do \
		echo "Changes detected, running smoke test..."; \
		make smoke-test; \
		sleep 2; \
	done

# Development mode with auto-restart
dev-mode:
	@echo "üîÑ Starting development mode..."
	@echo "Backend will restart on changes, tests will run automatically"
	@make run-backend & \
	sleep 5 && \
	make watch-test

# Display test statistics
test-stats: $(REPORT_DIR)
	@echo "üìà Test Execution Statistics"
	@echo "============================"
	@if [ -d "$(REPORT_DIR)" ]; then \
		echo "Total test runs: $$(ls $(REPORT_DIR)/test_execution_*.log 2>/dev/null | wc -l)"; \
		echo "Latest test: $$(ls -t $(REPORT_DIR)/test_execution_*.log 2>/dev/null | head -1)"; \
		if [ -f "$$(ls -t $(REPORT_DIR)/test_execution_*.log 2>/dev/null | head -1)" ]; then \
			echo "Last test status: $$(grep -o 'ALL TESTS PASSED\|SOME TESTS FAILED' $$(ls -t $(REPORT_DIR)/test_execution_*.log | head -1) || echo 'UNKNOWN')"; \
		fi; \
	else \
		echo "No test reports found. Run 'make test-all' first."; \
	fi

# Help for specific test types
help-scenarios:
	@echo "üìã Available Test Scenarios"
	@echo "=========================="
	@echo "1. Complete Pomodoro Workflow (test-scenario-1)"
	@echo "   - User authentication"
	@echo "   - Task creation with subtasks"
	@echo "   - Pomodoro session management"
	@echo "   - Timer precision validation"
	@echo ""
	@echo "2. Task Management & Reminders (test-scenario-2)"
	@echo "   - Task creation with due dates"
	@echo "   - Subtask management"
	@echo "   - Reminder notifications"
	@echo "   - Task completion workflow"
	@echo ""
	@echo "3. Cross-Device Sync (test-scenario-3)"
	@echo "   - Multi-device task synchronization"
	@echo "   - Real-time updates"
	@echo "   - Conflict resolution"
	@echo "   - Offline functionality"
	@echo ""
	@echo "4. Reports & Analytics (test-scenario-4)"
	@echo "   - Report generation"
	@echo "   - Metrics calculation"
	@echo "   - Data visualization"
	@echo "   - Historical data access"
	@echo ""
	@echo "5. Recurring Tasks (test-scenario-5)"
	@echo "   - Recurrence pattern creation"
	@echo "   - Instance generation"
	@echo "   - Series management"
	@echo "   - Pattern modification"