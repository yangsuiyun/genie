openapi: 3.0.3
info:
  title: Pomodoro Genie - Project Management API
  description: API endpoints for project management functionality
  version: 1.0.0
  contact:
    name: Pomodoro Genie Team

servers:
  - url: http://localhost:8081/v1
    description: Local development
  - url: https://api.pomodoro-genie.com/v1
    description: Production

security:
  - BearerAuth: []

paths:
  /projects:
    get:
      summary: List all projects for authenticated user
      operationId: listProjects
      tags: [Projects]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: filter
          in: query
          description: Filter by completion status
          schema:
            type: string
            enum: [all, active, completed]
            default: all
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create a new project
      operationId: createProject
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  example: "Website Redesign"
                description:
                  type: string
                  maxLength: 2000
                  example: "Q4 2025 website redesign project"
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Project name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{id}:
    parameters:
      - $ref: '#/components/parameters/ProjectId'

    get:
      summary: Get project details
      operationId: getProject
      tags: [Projects]
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectWithStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update project
      operationId: updateProject
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                description:
                  type: string
                  maxLength: 2000
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Project name conflict

    delete:
      summary: Delete project (cascades to tasks and sessions)
      operationId: deleteProject
      tags: [Projects]
      responses:
        '204':
          description: Project deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Cannot delete default project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'

  /projects/{id}/tasks:
    parameters:
      - $ref: '#/components/parameters/ProjectId'

    get:
      summary: List tasks for a project
      operationId: listProjectTasks
      tags: [Projects, Tasks]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [all, pending, completed]
            default: all
        - name: sort
          in: query
          schema:
            type: string
            enum: [priority, due_date, created_at]
            default: priority
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      summary: Create task in project
      operationId: createProjectTask
      tags: [Projects, Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /projects/{id}/statistics:
    parameters:
      - $ref: '#/components/parameters/ProjectId'

    get:
      summary: Get project statistics
      operationId: getProjectStatistics
      tags: [Projects, Statistics]
      responses:
        '200':
          description: Project statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatistics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /projects/{id}/complete:
    parameters:
      - $ref: '#/components/parameters/ProjectId'

    post:
      summary: Toggle project completion status
      operationId: toggleProjectCompletion
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - is_completed
              properties:
                is_completed:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Project completion status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks:
    post:
      summary: Create task (requires project_id)
      operationId: createTask
      tags: [Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Missing project_id or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ProjectId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      example: "22222222-2222-2222-2222-222222222222"

  schemas:
    Project:
      type: object
      required:
        - id
        - user_id
        - name
        - is_default
        - is_completed
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          example: "22222222-2222-2222-2222-222222222222"
        user_id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 255
          example: "Website Redesign"
        description:
          type: string
          nullable: true
          maxLength: 2000
          example: "Q4 2025 redesign project"
        is_default:
          type: boolean
          example: false
        is_completed:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProjectWithStats:
      allOf:
        - $ref: '#/components/schemas/Project'
        - type: object
          properties:
            statistics:
              $ref: '#/components/schemas/ProjectStatistics'

    ProjectStatistics:
      type: object
      properties:
        total_tasks:
          type: integer
          example: 10
        completed_tasks:
          type: integer
          example: 3
        pending_tasks:
          type: integer
          example: 7
        completion_percent:
          type: number
          format: float
          example: 30.0
        total_pomodoros:
          type: integer
          example: 45
        total_time_seconds:
          type: integer
          example: 67500
        total_time_formatted:
          type: string
          example: "18h 45m"
        avg_pomodoro_duration_sec:
          type: integer
          example: 1500
        last_activity_at:
          type: string
          format: date-time
          nullable: true

    Task:
      type: object
      required:
        - id
        - user_id
        - project_id
        - name
        - is_completed
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        priority:
          type: integer
          minimum: 1
          maximum: 4
        is_completed:
          type: boolean
        due_date:
          type: string
          format: date-time
          nullable: true
        estimated_pomodoros:
          type: integer
          minimum: 0
        completed_pomodoros:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TaskCreate:
      type: object
      required:
        - name
        - project_id
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 2000
        project_id:
          type: string
          format: uuid
        priority:
          type: integer
          minimum: 1
          maximum: 4
          default: 2
        estimated_pomodoros:
          type: integer
          minimum: 0
          default: 1
        due_date:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        total_pages:
          type: integer
          example: 8

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "validation_error"
        message:
          type: string
          example: "Project name is required"
        details:
          type: object
          nullable: true

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
