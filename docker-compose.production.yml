version: '3.8'

services:
  # Nginx反向代理和静态文件服务
  nginx:
    image: nginx:alpine
    container_name: pomodoro-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./production/web:/usr/share/nginx/html
      - ./nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL证书目录
    depends_on:
      - api
      - database
    networks:
      - pomodoro-network
    restart: unless-stopped

  # Go API服务
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: pomodoro-api
    ports:
      - "8081:8081"
    environment:
      - GIN_MODE=release
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@database:5432/pomodoro_genie
      - REDIS_URL=redis://redis:6379
    depends_on:
      - database
      - redis
    networks:
      - pomodoro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL数据库
  database:
    image: postgres:15-alpine
    container_name: pomodoro-db
    environment:
      POSTGRES_DB: pomodoro_genie
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - pomodoro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: pomodoro-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - pomodoro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 监控服务 (可选)
  monitoring:
    image: prom/prometheus:latest
    container_name: pomodoro-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - pomodoro-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  pomodoro-network:
    driver: bridge